a <- data[data$SERIALNO > 1000000,]
a
View(a)
a <- a[a$TYPE==1,]
a
View(a)
idaho <- data[data$ST=='ID',]
idaho <- data[data$ST==16,]
a <- idaho[idaho$VAL==24,]
a
a <- a[!is.na()]
a <- a[!is.na(a$VAL)]
a <- a[!is.na(a$VAL),]
a
b <- a["FES",]
View(b)
a$FES
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <- "data.csv"
method <- "curl"
file <- download.file(url=url,destfile=destfile,method=method)
file
install.packages("RCurl")
library(RCurl)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <- "data.csv"
method <- "curl"
file <- download.file(url=url,destfile=destfile,method=method)
url
x <- getURL(url)
?getURL
x <- getURL(url,ssl.verifypeer = FALSE)
str(x)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <- "data.csv"
method <- "auto"##"curl"
file <- download.file(url=url,destfile=destfile,method=method)
file
data <- read.csv("data.csv")
subset <- data[data$VAL==24,]
subset <- subset[subset$ST==16,]
View(subset)
subset <- subset[!is.na(subset$VAL),]
View(subset)
xlsURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
destfile <- "NGAP.xlsx"
file <- download.file(url=url,destfile=destfile,method=method)
xlsURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
destfile <- "NGAP.xlsx"
file <- download.file(url=xlsURL,destfile=destfile,method=method)
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("NGAP.xlsx",sheetIndex=1,
colIndex=colIndex,rowIndex=rowIndex)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx("NGAP.xlsx",sheetIndex=1,
colIndex=colIndex,rowIndex=rowIndex)
View(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
libraq(XML)
library(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url,useInternal=TRUE)
?fread
?fread()
install.packages("data.table")
library(data.table)
filepath <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
DT <- fread(filepath)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
t1 <-  system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t2 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
t2 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
t3 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t4 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
t5 <- system.time(DT[,mean(pwgtp15),by=SEX])
t6 <- system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
t6 <- system.time(rowMeans(DT)[DT$SEX==1])
lst <- list(t1,t2,t3,t4,t5)
lst
sum(dat$Zip*dat$Ext,na.rm=T)
?read.table
?strptime
a <- strptime(paste("2014-01-01","15:20:31"),"%d/%m/%Y %H:%M:%S")
a
z <- strptime("20/2/06 11:16:16.683", "%d/%m/%y %H:%M:%OS")
z
paste("2014-01-01","15:20:31")
z <- strptime("2014-01-01 15:20:31", "%d/%m/%y %H:%M:%OS")
z
set.seed(1234)
df <- data.frame(cond = factor(rep(c("A","B"),each=200)),
rating = c(rnorm(200),rnorm(200, mean=0.8)))
View(df)
library(ggplot2)
head(df)
tail(df)
qplot(df$rating, binwidth=0.5)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.1)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.9)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5,colour="black",fill="white")
ggplot(df,aes(x=df$rating))+geom_density()
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5,colour="black",fill="white")+
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=density),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
?xintercept
ggplot(df, aes(x=rating,fill=cond)) +
geom_histogram(binwidth=0.5,alpha=0.5,position = "identity")
ggplot(df, aes(x=rating, colour=cond)) + geom_density()
ggplot(df, aes(x=rating, fill=cond)) + geom_histogram(binwidth=.5, position="dodge")
ggplot(df, aes(x=rating,fill=cond)) +
geom_histogram(binwidth=0.5,alpha=0.5,position = "identity")
ggplot(df, aes(x=rating,fill=cond)) +
geom_histogram(binwidth=.5,alpha=0.5,position = "identity")
ggplot(df, aes(x=rating, fill=cond)) + geom_density(alpha=.3)
install.packages("rjson")
cran.packages <- c("e1071",
"ggplot2",
"glmnet",
"Hmisc",
"igraph",
"lme4",
"lubridate",
"plyr",
"RCurl",
"reshape",
"RJSONIO",
"scales",
"tm",
"XML")
cat("This script will now attempt to install all of the R packages used in 'Machine Learning for Hackers'")
for(p in cran.packages) {
if(!suppressWarnings(require(p, character.only = TRUE, quietly = TRUE))) {
cat(paste(p, "missing, will attempt to install\n"))
install.packages(p, dependencies = TRUE, type = "source")
}
else {
cat(paste(p, "installed OK\n"))
}
}
print("### All required packages installed ###")
install.packages(c("arules", "caTools", "e1071", "formatR", "htmltools", "httr", "jsonlite", "labeling", "markdown", "mime", "NLP", "partykit", "prodlim", "randomForest", "rattle", "Rcpp", "RCurl", "RJSONIO", "SparseM", "tau", "TSP", "vcd", "xlsx", "xlsxjars"))
require(Rweibo)
install.packages("rmarkdown")
registerApp(app_name="text_mining_R","3154041990","b817f3a4f74f51af23b26d7582dffd68")
listApp("text_mining_R")
?listApp
deleteApp("text_mining_R")
registerApp(app_name="text_mining_R","3154041990","b817f3a4f74f51af23b26d7582dffd68")
listApp("text_mining_R")
roauth <- create(app_name="text_mining_R",access_name="rweibo")
roauth <- createOAuth(app_name="text_mining_R",access_name="rweibo")
dasd
asd
a
?createOAuth
install.packages("Rweibo", repos="http://R-Forge.R-project.org", type="source")
install.packages("Rweibo", repos = "http://R-Forge.R-project.org",
type="source")
require(Rweibo)
listApp("text_mining_R")
registerApp(app_name="text_mining_R","3154041990","b817f3a4f74f51af23b26d7582dffd68")
listApp("text_mining_R")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
class(roauth)
roauth
roauth$getLimits(TRUE)
res2 <- statuses.friends_timeline(roauth, count = 5)
summary(res2)
class(res2)
res2
res2[[1]]
res5 <- comments.by_me(roauth,count = 5)
res5
res5[[1]]
res5$text
statuses.update(roauth, status = "使用R发的微博")
a <- statuses.update(roauth, status = "使用R发的微博2")
a
class(a)
a$text
l <- analysis.getUserTimeline(roauth, screen_name = "硕硕的U盘")
names(l)
l$text
l$text[1:10]
roauth$getLimits(TRUE)
u <- web.search.user('lvraikkonen')
u
?web.search.user
roauth
recent <- statuses.public_timeline(roauth, count = 5)
recent
recent$text
recent[1:10]$text
class(recent$text)
recent
recent[[1:10,]]
recent[1:10,]
recent[[2]]
recent[[1:10]]
recent$id
recent[1]$id
recent[[1]$id
recent[[1]]$id
recent[[1]]$text
recent[[2]]$text
recent[[3]]$text
sample(1:10, replace= TRUE)
train <- read.csv("~/Kaggle Totorial/train.csv", stringsAsFactors=FALSE)
test <- read.csv("~/Kaggle Totorial/test.csv", stringsAsFactors=FALSE)
test$Survived <- NA
conbi <- rbind(train,test)
strsplit(conbi$Name[1],split='[,.]')[[1]][2]
conbi$Title <- sapply(conbi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
conbi$Title <- sub(' ','',conbi$Title) ## trim
conbi$Title[conbi$Title %in% c('Mme','Mlle')] <- 'Mlle'
conbi$Title[conbi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
conbi$Title[conbi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
conbi$Title <- as.factor(conbi$Title)
conbi$FamliySize <- conbi$SibSp + conbi$Parch + 1
conbi$Surname <- sapply(conbi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
conbi$FamilyID <- paste(as.character(conbi$FamliySize), conbi$Surname, sep="")
conbi$FamilyID[conbi$FamliySize <= 2] <- 'Small'
famIDs <- data.frame(table(conbi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
conbi$FamilyID[conbi$FamilyID %in% famIDs$Var1] <- 'Small'
conbi$FamilyID <- factor(conbi$FamilyID)
summary(conbi)
263/1309
library(e1071)
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data = conbi[!is.na(conbi$Age),],method="anova")
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamliySize,
data = conbi[!is.na(conbi$Age),],method="anova")
summary(conbi$Age)
conbi$Age[is.na(conbi$Age)] <- predict(Agefit,conbi[is.na(conbi$Age),])
summary(conbi$Age)
summary(conbi)
summary(conbi$Embarked)
conbi$Embarked
table(conbi$Embarked)
which(conbi$Embarked == '')
conbi$Embarked[c(62,830)] = "S"
table(conbi$Embarked)
which(is.na(conbi$Fare))
median(conbi$Fare, na.rm=TRUE)
summary(conbi)
conbi$Fare[1044] <- median(conbi$Fare, na.rm=TRUE)
summary(conbi)
conbi$Embarked <- as.factor(conbi$Embarked)
summary(conbi)
conbi$FamilyID
conbi$FamilyID2 <- conbi$FamilyID
conbi$FamilyID2 <- as.character(conbi$FamilyID2)
conbi$FamilyID2[conbi$FamilySize <= 3] <- 'Small'
conbi$FamilyID2 <- factor(conbi$FamilyID2)
summary(conbi)
conbi$FamilyID2
conbi$FamilyID2 <- conbi$FamilyID
conbi$FamilyID2
conbi$FamilyID2 <- conbi$FamilyID
conbi$FamilyID2 <- as.character(conbi$FamilyID2)
summary(conbi)
conbi$FamilyID2[conbi$FamilySize <= 3] <- 'Small'
conbi$FamilyID2 <- factor(conbi$FamilyID2)
View(famIDs)
View(famIDs)
conbi$FamilyID2
train <- read.csv("~/Kaggle Totorial/train.csv", stringsAsFactors=FALSE)
test <- read.csv("~/Kaggle Totorial/test.csv", stringsAsFactors=FALSE)
test$Survived <- NA
conbi <- rbind(train,test)
strsplit(conbi$Name[1],split='[,.]')[[1]][2]
conbi$Title <- sapply(conbi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
conbi$Title <- sub(' ','',conbi$Title) ## trim
conbi$Title[conbi$Title %in% c('Mme','Mlle')] <- 'Mlle'
conbi$Title[conbi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
conbi$Title[conbi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
conbi$Title <- as.factor(conbi$Title)
## add the number of siblings, spouses, parents and children the passenger
conbi$FamilySize <- conbi$SibSp + conbi$Parch + 1
conbi$Surname <- sapply(conbi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
conbi$FamilyID <- paste(as.character(conbi$FamilySize), conbi$Surname, sep="")
conbi$FamilyID[conbi$FamilySize <= 2] <- 'Small'
table(conbi$FamilyID)
famIDs <- data.frame(table(conbi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
conbi$FamilyID[conbi$FamilyID %in% famIDs$Var1] <- 'Small'
conbi$FamilyID <- factor(conbi$FamilyID)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=[!is.na(conbi$Age),], method='anova')
conbi$Age[is.na(conbi$Age)] <- predict(Agefit, conbi[is.na(conbi$Age),])
summary(conbi)
summary(conbi)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=[!is.na(conbi$Age),], method='anova')
is.na(conbi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=[!is.na(conbi$Age),], method='anova')
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=conbi[!is.na(conbi$Age),], method='anova')
conbi$Age[is.na(conbi$Age)] <- predict(Agefit, conbi[is.na(conbi$Age),])
summary(conbi)
table(conbi$Embarked)
which(conbi$Embarked == '')
conbi$Embarked[c(62,830)] = "S"
conbi$Embarked <- as.factor(conbi$Embarked)
which(is.na(conbi$Fare))
conbi$Fare[1044] <- median(conbi$Fare, na.rm=TRUE)
conbi$FamilyID2 <- conbi$FamilyID
conbi$FamilyID2 <- as.character(conbi$FamilyID2)
conbi$FamilyID2[conbi$FamilySize <= 3] <- 'Small'
conbi$FamilyID2 <- factor(conbi$FamilyID2)
summary(conbi)
summary(conbi$FamilyID2)
conbi$FamilyID2
library(randomForest)
train <- conbi[1:891,]
test <- conbi[892:1309,]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,data = train,
importance=TRUE, ntree=2000)
summary(train)
as.factor(train$Survived)
train$Fare
summary(train)
train$Survived <- as.factor(train$Survived)
summary(train)
set.seed(412)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,data = train,
importance=TRUE, ntree=2000)
?randomForest
table(is.na(train$Pclass))
table(is.na(train$Sex))
table(is.na(train$Age))
table(is.na(train$SibSp))
table(is.na(train$Parch))
table(is.na(train$Fare))
table(is.na(train$Embarked))
table(is.na(train$Title))
table(is.na(train$FamilySize))
table(is.na(train$FamilyID2))
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance=TRUE, ntree=2000)
class(train$Pclass)
class(train$Sex)
class(train$Embarked)
train$Sex <- as.factor(train$Sex)
train$Sex
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance=TRUE, ntree=2000)
varImpPlot(fit)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance=TRUE, ntree=30)
varImpPlot(fit)
pred.randomForest <- predict(fit,test)
head(test)
pred.randomForest <- predict(fit,test)
fit
train <- read.csv("~/Kaggle Totorial/train.csv", stringsAsFactors=FALSE)
test <- read.csv("~/Kaggle Totorial/test.csv", stringsAsFactors=FALSE)
library(rpart)
library(e1071)
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
test$Survived <- NA
conbi <- rbind(train,test)
train <- read.csv("~/Kaggle Totorial/train.csv", stringsAsFactors=FALSE)
test <- read.csv("~/Kaggle Totorial/test.csv", stringsAsFactors=FALSE)
test$Survived <- NA
conbi <- rbind(train,test)
strsplit(conbi$Name[1],split='[,.]')[[1]][2]
conbi$Title <- sapply(conbi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
conbi$Title <- sub(' ','',conbi$Title) ## trim
conbi$Title[conbi$Title %in% c('Mme','Mlle')] <- 'Mlle'
conbi$Title[conbi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
conbi$Title[conbi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
conbi$Title <- as.factor(conbi$Title)
conbi$FamilySize <- conbi$SibSp + conbi$Parch + 1
conbi$Surname <- sapply(conbi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
conbi$FamilyID <- paste(as.character(conbi$FamilySize), conbi$Surname, sep="")
conbi$FamilyID[conbi$FamilySize <= 2] <- 'Small'
table(conbi$FamilyID)
famIDs <- data.frame(table(conbi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
conbi$FamilyID[conbi$FamilyID %in% famIDs$Var1] <- 'Small'
conbi$FamilyID <- factor(conbi$FamilyID)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=conbi[!is.na(conbi$Age),], method='anova')
conbi$Age[is.na(conbi$Age)] <- predict(Agefit, conbi[is.na(conbi$Age),])
summary(conbi)
table(conbi$Embarked)
which(conbi$Embarked == '')
conbi$Embarked[c(62,830)] = "S"
conbi$Embarked <- as.factor(conbi$Embarked)
which(is.na(conbi$Fare))
conbi$Fare[1044] <- median(conbi$Fare, na.rm=TRUE)
## factor level should be less than 32
conbi$FamilyID2 <- conbi$FamilyID
conbi$FamilyID2 <- as.character(conbi$FamilyID2)
conbi$FamilyID2[conbi$FamilySize <= 3] <- 'Small'
conbi$FamilyID2 <- factor(conbi$FamilyID2)
library(randomForest)
set.seed(412)
train$Sex <- as.factor(train$Sex)
## break them apart
train <- conbi[1:891,]
test <- conbi[892:1309,]
train$Sex <- as.factor(train$Sex)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance=TRUE, ntree=30)
## what variables were important
varImpPlot(fit)
pred.randomForest <- predict(fit,test)
head(train)
head(test)
summary(train)
summary(test)
train$Sex <- as.factor(train$Sex)
test$Sex <- as.factor(test$Sex)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data = train,
importance=TRUE, ntree=30)
varImpPlot(fit)
pred.randomForest <- predict(fit,test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.randomForest)
write.csv(submit, file = "pred_rendomForest.csv", row.names = FALSE)
getwd()
setwd("./GitHub/Kaggle/Titanic/")
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.randomForest)
write.csv(submit, file = "pred_rendomForest.csv", row.names = FALSE)
library(party)
install.packages(party)
install.packages("party")
library(party)
set.feed(415)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID,
data = train, controls=cforest_unbiased(ntree=2000,mtry=3))
fit
pred.cirandomForest <- predict(fit,test, OOB=TRUE,type="response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.cirandomForest)
write.csv(submit, file = "pred_cirendomForest.csv", row.names = FALSE)
