}
pow
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
cube
cube(x)
cube(2)
squre <- make.power(2)
squre
ls(environment('squre'))
ls(environment(squre))
get("n",environment(squre))
aFun <- make.power(3)
aFun
version
require(graphics)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
x
head(x)
colnames(x) <- c("x", "y")
head(x)
cl <- kmeans(x, 2))
cl <- kmeans(x, 2)
cl
cl$cluster
plot(x, col = cl$cluster)
points(cl$centers, col = 1:2, pch = 8, cex = 2)
cells <- c(1, 1, 2, 1, 4, 3, 5, 4)
rnames <- c("A", "B", "C", "D")
cnames <- c("X", "Y")
x <- matrix(cells, nrow=4, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
x
km <- kmeans(x,2,15)
km
plot(x,col = km$cluster)
points(km$centers, col = 1:2, pch = 8)
?kmeans
data("iris")
set.seed(321)
iris
iris.km <- kmeans(iris[, -5], 3, iter.max = 1000)
iris.km
iris.km$cluster
tbl <- table(iris[,5], iris.km$cluster)
tbl
iris[,5]
iris.dist <- dist(iris[, -5])
iris.dist
iris.mds <- cmdscale(iris.dist)
c.chars <- c("*", "o", "+")[as.integer(iris$Species)]
a.cols <- rainbow(3)[iris.km$cluster]
plot(iris.mds, col = a.cols, pch = c.chars, xlab = "X", ylab = "Y")
View(iris.mds)
getwd()
data <- read.csv("getdata_data_ss06hid.csv")
summary(data)
str(data)
housingunit <- data[,"SERIALNO"]
housingunit
a <- housingunit[x>1000000]
a <- housingunit[SERIALNO>1000000]
a <- housingunit["SERIALNO">1000000]
View(data)
summary(data)
a <- data[data$SERIALNO > 1000000]
a <- data[data$SERIALNO > 1000000,]
a
View(a)
a <- a[a$TYPE==1,]
a
View(a)
idaho <- data[data$ST=='ID',]
idaho <- data[data$ST==16,]
a <- idaho[idaho$VAL==24,]
a
a <- a[!is.na()]
a <- a[!is.na(a$VAL)]
a <- a[!is.na(a$VAL),]
a
b <- a["FES",]
View(b)
a$FES
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <- "data.csv"
method <- "curl"
file <- download.file(url=url,destfile=destfile,method=method)
file
install.packages("RCurl")
library(RCurl)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <- "data.csv"
method <- "curl"
file <- download.file(url=url,destfile=destfile,method=method)
url
x <- getURL(url)
?getURL
x <- getURL(url,ssl.verifypeer = FALSE)
str(x)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile <- "data.csv"
method <- "auto"##"curl"
file <- download.file(url=url,destfile=destfile,method=method)
file
data <- read.csv("data.csv")
subset <- data[data$VAL==24,]
subset <- subset[subset$ST==16,]
View(subset)
subset <- subset[!is.na(subset$VAL),]
View(subset)
xlsURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
destfile <- "NGAP.xlsx"
file <- download.file(url=url,destfile=destfile,method=method)
xlsURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
destfile <- "NGAP.xlsx"
file <- download.file(url=xlsURL,destfile=destfile,method=method)
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("NGAP.xlsx",sheetIndex=1,
colIndex=colIndex,rowIndex=rowIndex)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx("NGAP.xlsx",sheetIndex=1,
colIndex=colIndex,rowIndex=rowIndex)
View(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
libraq(XML)
library(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url,useInternal=TRUE)
?fread
?fread()
install.packages("data.table")
library(data.table)
filepath <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
DT <- fread(filepath)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
t1 <-  system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t2 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
t2 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
t3 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t4 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
t5 <- system.time(DT[,mean(pwgtp15),by=SEX])
t6 <- system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
t6 <- system.time(rowMeans(DT)[DT$SEX==1])
lst <- list(t1,t2,t3,t4,t5)
lst
sum(dat$Zip*dat$Ext,na.rm=T)
?read.table
?strptime
a <- strptime(paste("2014-01-01","15:20:31"),"%d/%m/%Y %H:%M:%S")
a
z <- strptime("20/2/06 11:16:16.683", "%d/%m/%y %H:%M:%OS")
z
paste("2014-01-01","15:20:31")
z <- strptime("2014-01-01 15:20:31", "%d/%m/%y %H:%M:%OS")
z
set.seed(1234)
df <- data.frame(cond = factor(rep(c("A","B"),each=200)),
rating = c(rnorm(200),rnorm(200, mean=0.8)))
View(df)
library(ggplot2)
head(df)
tail(df)
qplot(df$rating, binwidth=0.5)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.1)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.9)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5)
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5,colour="black",fill="white")
ggplot(df,aes(x=df$rating))+geom_density()
ggplot(df,aes(x=df$rating)) + geom_histogram(binwidth=0.5,colour="black",fill="white")+
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=density),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df,aes(x=df$rating)) +
geom_histogram(aes(y=..density..),
binwidth=0.5,
colour="black",
fill="white") +
geom_density(alpha=0.2,fill="#FF6666")
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(m=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
?xintercept
ggplot(df, aes(x=rating,fill=cond)) +
geom_histogram(binwidth=0.5,alpha=0.5,position = "identity")
ggplot(df, aes(x=rating, colour=cond)) + geom_density()
ggplot(df, aes(x=rating, fill=cond)) + geom_histogram(binwidth=.5, position="dodge")
ggplot(df, aes(x=rating,fill=cond)) +
geom_histogram(binwidth=0.5,alpha=0.5,position = "identity")
ggplot(df, aes(x=rating,fill=cond)) +
geom_histogram(binwidth=.5,alpha=0.5,position = "identity")
ggplot(df, aes(x=rating, fill=cond)) + geom_density(alpha=.3)
install.packages("rjson")
cran.packages <- c("e1071",
"ggplot2",
"glmnet",
"Hmisc",
"igraph",
"lme4",
"lubridate",
"plyr",
"RCurl",
"reshape",
"RJSONIO",
"scales",
"tm",
"XML")
cat("This script will now attempt to install all of the R packages used in 'Machine Learning for Hackers'")
for(p in cran.packages) {
if(!suppressWarnings(require(p, character.only = TRUE, quietly = TRUE))) {
cat(paste(p, "missing, will attempt to install\n"))
install.packages(p, dependencies = TRUE, type = "source")
}
else {
cat(paste(p, "installed OK\n"))
}
}
print("### All required packages installed ###")
install.packages(c("arules", "caTools", "e1071", "formatR", "htmltools", "httr", "jsonlite", "labeling", "markdown", "mime", "NLP", "partykit", "prodlim", "randomForest", "rattle", "Rcpp", "RCurl", "RJSONIO", "SparseM", "tau", "TSP", "vcd", "xlsx", "xlsxjars"))
require(Rweibo)
install.packages("rmarkdown")
registerApp(app_name="text_mining_R","3154041990","b817f3a4f74f51af23b26d7582dffd68")
listApp("text_mining_R")
?listApp
deleteApp("text_mining_R")
registerApp(app_name="text_mining_R","3154041990","b817f3a4f74f51af23b26d7582dffd68")
listApp("text_mining_R")
roauth <- create(app_name="text_mining_R",access_name="rweibo")
roauth <- createOAuth(app_name="text_mining_R",access_name="rweibo")
dasd
asd
a
?createOAuth
install.packages("Rweibo", repos="http://R-Forge.R-project.org", type="source")
install.packages("Rweibo", repos = "http://R-Forge.R-project.org",
type="source")
require(Rweibo)
listApp("text_mining_R")
registerApp(app_name="text_mining_R","3154041990","b817f3a4f74f51af23b26d7582dffd68")
listApp("text_mining_R")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
roauth <- createOAuth(app_name = "text_mining_R", access_name = "rweibo")
class(roauth)
roauth
roauth$getLimits(TRUE)
res2 <- statuses.friends_timeline(roauth, count = 5)
summary(res2)
class(res2)
res2
res2[[1]]
res5 <- comments.by_me(roauth,count = 5)
res5
res5[[1]]
res5$text
statuses.update(roauth, status = "使用R发的微博")
a <- statuses.update(roauth, status = "使用R发的微博2")
a
class(a)
a$text
l <- analysis.getUserTimeline(roauth, screen_name = "硕硕的U盘")
names(l)
l$text
l$text[1:10]
roauth$getLimits(TRUE)
u <- web.search.user('lvraikkonen')
u
?web.search.user
roauth
recent <- statuses.public_timeline(roauth, count = 5)
recent
recent$text
recent[1:10]$text
class(recent$text)
recent
recent[[1:10,]]
recent[1:10,]
recent[[2]]
recent[[1:10]]
recent$id
recent[1]$id
recent[[1]$id
recent[[1]]$id
recent[[1]]$text
recent[[2]]$text
recent[[3]]$text
train <- read.csv("~/Kaggle Totorial/train.csv", stringsAsFactors=FALSE)
test <- read.csv("~/Kaggle Totorial/test.csv", stringsAsFactors=FALSE)
head(train)
library(e1071)
?naiveBayes
fit <- naiveBayes(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data = train)
fir
fit
?predict.naiveBayes
pred <- predict(fit, train[,-2])
?knn
pred <- predict(fit, as.factor(train[,-2]))
train[,-2]
head(train[,-2])
pred <- predict(fit, train[,-2])
pred
pred <- predict(fit, train)
library(rpart)
pred <- predict(fit, train)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
predicition <- predict(fit, test, type="class")
predicition <- predict(fit, te, type="class")
predicition <- predict(fit, train, type="class")
table(predicition,train[,2])
rate <- (521+227)/(521+115+28+227)
rate
summary(train)
naivebayes.fit <- naiveBayes(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train)
naivebayes.fit
summary(train)
train$Survived <- as.factor(train$Survived)
summary(train)
naivebayes.fit <- naiveBayes(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train)
pred.naivebayes <- predict(naivebayes.fit,test)
head(pred.naivebayes)
pred.naivebayes
table(pred.naivebayes)
naivebayes.fit <- naiveBayes(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train)
pred.naivebayes <- predict(naivebayes.fit,test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.naivebayes)
submit
write.csv(submit, file = "pred.csv", row.names = FALSE)
setwd("./GitHub/Kaggle/Titanic/")
getwd()
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.naivebayes)
write.csv(submit, file = "pred.csv", row.names = FALSE)
naivebayes.fit <- naiveBayes(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train)
pred <- predict(naivebayes.fit,train)
table(pred,train[,2])
summary(train)
table(pred,train[,2])
(467+138)/(891)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
pred.decissiontree <- predict(fit, test, type="class")
pred.decissiontree <- predict(fit, test, type="class")
pred.decissiontree <- predict(fit, train, type="class")
table(pred.decissiontree,train[,2])
(521+115)/891
head(test)
summary(test)
summary(train)
mean.train.age <- mean(train$Age, na.rm=TRUE)
train$Age[is.na(train$Age)]
train$Age[is.na(train$Age)] <- mean.train.age
summary(train)
naivebayes.fit <- naiveBayes(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train)
mean.test.age <- mean(test$Age, na.rm=TRUE)
mean.test.age <- mean(test$Age, na.rm=TRUE)
test$Age[is.na(test$Age)] <- mean.test.age
pred.naivebayes <- predict(naivebayes.fit,test)
pred.naivebayes
pred.decissiontree
pred.naivebayes <- predict(naivebayes.fit,train)
table(pred.naivebayes,train[,2])
(467+197)/891
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
pred.decissiontree <- predict(fit, test, type="class")
pred.decissiontree <- predict(fit, train, type="class")
table(pred.decissiontree,train[,2])
(498+244)/891
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.decissiontree)
write.csv(submit, file = "pred_decisiontree.csv", row.names = FALSE)
pred.decissiontree <- predict(fit, test, type="class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.decissiontree)
write.csv(submit, file = "pred_decisiontree.csv", row.names = FALSE)
pred.decissiontree <- predict(fit, train, type="class")
prop.table(table(pred.decissiontree,train$Survived))
train$Name
train$Name[1]
test$Survived <- NA
conbi <- rbind(train,test)
class(1)
class('fasf')
class(conbi$Name)
conbi$Name[1]
?strsplit
strsplit(conbi$Name[1],split=c(',','.'))
strsplit(conbi$Name[1],split=',')
strsplit(conbi$Name[1],split='[,.]')
strsplit(conbi$Name[1],split='[,.]')[1]
strsplit(conbi$Name[1],split='[,.]')[[1]]
strsplit(conbi$Name[1],split='[,.]')[[1]][2]
strsplit(conbi$Name[1],split='[,.]')[[1]][2]
title <- supply(conbi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
title <- sapply(conbi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
title
head(title)
class(title)
mode(title)
conbi$Title <- sapply(conbi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
head(conbi)
conbi$Title <- sub(' ','',conbi$Title)
head(conbi$Title)
table(conbi$Title)
conbi$Title[conbi$Title %in% c('Mme','Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
conbi$Title[conbi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
conbi$Title[conbi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
table(conbi$Title)
conbi[conbi$Title=='Col',]
conbi$Title <- as.factor(conbi$Title)
conbi$Title
conbi$Title <- as.factor(conbi$Title)
conbi[conbi$Title=='Col',]
conbi$FamliySize <- conbi$SibSp + conbi$Parch + 1
conbi[conbi$Title=='Col',]
conbi$Surname <- sapply(conbi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
conbi$FamilyID <- paste(as.character(conbi$FamilySize), conbi$Surname, sep="")
table(conbi$FamilyID)
conbi$FamilyID[conbi$FamilySize <= 2] <- 'Small'
table(conbi$FamilyID)
conbi$FamilyID
table(conbi$FamilyID)
conbi$FamilyID
conbi$FamliySize <- conbi$SibSp + conbi$Parch + 1
conbi$Surname <- sapply(conbi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
conbi$FamilySize
conbi$FamilySize
conbi
head(conbi$FamliySize)
conbi$FamliySize
conbi$FamilyID <- paste(as.character(conbi$FamilySize), conbi$Surname, sep="")
conbi$FamilySize
conbi$FamliySize
as.character(conbi$FamliySize)
conbi$Surname
conbi$FamilyID <- paste(as.character(conbi$FamliySize), conbi$Surname, sep="")
conbi$FamilySize
conbi$FamliySize
conbi$FamilyID[conbi$FamliySize <= 2] <- 'Small'
table(combi$FamilyID)
table(conbi$FamilyID)
famIDs <- data.frame(table(conbi$FamilyID))
View(famIDs)
View(famIDs)
famIDs <- famIDs[famIDs$Freq <= 2,]
View(famIDs)
conbi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
conbi$FamilyID[conbi$FamilyID %in% famIDs$Var1] <- 'Small'
famIDs$Var1
conbi$FamilyID <- factor(conbi$FamilyID)
conbi$FamilyID
train <- conbi[1:891,]
test <- conbi[892:1309,]
conbi$FamliySize
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train, method="class")
train$FamliySize
## Prediction
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamliySize + FamilyID,
data=train, method="class")
pred.decissiontree <- predict(fit, train, type="class")
data=train, method="class")
pred.decissiontree <- predict(fit, train, type="class")
pred.decissiontree
table(pred.decissiontree,train[,2])
(522+240)/891
pred.decissiontree <- predict(fit, test, type="class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = pred.decissiontree)
write.csv(submit, file = "pred_decisiontree.csv", row.names = FALSE)
library(ggplot2)
